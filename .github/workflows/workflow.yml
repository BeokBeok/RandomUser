# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Build Project
        run: ./gradlew assemble

      - name: Run jacoco
        run: ./gradlew jacocoTestReport

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1.0.14
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml

      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: app
          path: ./app/build/outputs/apk/**/*.apk

      - name: Setting an environment variable
        run: |
          export VERSION_NAME=`egrep '^[[:blank:]]+const val VERSION_NAME[[:blank:]]'  buildSrc/src/main/java/GradleConfig.kt | awk '{print $5}' | sed s/\"//g`
          echo "DEBUG_APK=app-debug-${VERSION_NAME}.apk" >> $GITHUB_ENV

      - name: Deploy APK in Slack
        run: |
          curl https://slack.com/api/files.upload -F token=${{ secrets.SLACK_TOKEN }} -F channels="test-study" -F title=$DEBUG_APK -F filename=$DEBUG_APK -F file="@app/build/outputs/apk/debug/$DEBUG_APK"
